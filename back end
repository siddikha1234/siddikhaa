Building a full-stack food delivery platform involves both frontend and backend development. Here's a step-by-step guide to help you set up the project using React for the frontend and Node.js/Express.js for the backend. We will cover the key features including user authentication, restaurant management, order processing, geolocation services, and database integration.

### Step 1: Set Up the Project

#### 1.1 Initialize the Backend

1. **Create a new directory for the project**
   ```sh
   mkdir food-delivery-platform
   cd food-delivery-platform
   ```

2. **Initialize the backend with Express**
   ```sh
   mkdir backend
   cd backend
   npm init -y
   npm install express mongoose bcryptjs jsonwebtoken body-parser cors
   ```

3. **Create the basic server setup**

Create `server.js` in the `backend` directory:

```js
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const cors = require('cors');

const app = express();
const port = process.env.PORT || 5000;

app.use(bodyParser.json());
app.use(cors());

mongoose.connect('mongodb://localhost/fooddelivery', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

const db = mongoose.connection;
db.once('open', () => {
  console.log('Connected to MongoDB');
});

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
```

#### 1.2 Initialize the Frontend

1. **Create a new React project**
   ```sh
   npx create-react-app frontend
   cd frontend
   ```

2. **Install necessary packages**
   ```sh
   npm install axios react-router-dom
   ```

### Step 2: Backend Implementation

#### 2.1 Set Up Models

Create a `models` directory in `backend` and add the following files:

**User.js**

```js
const mongoose = require('mongoose');

const UserSchema = new mongoose.Schema({
  username: { type: String, required: true, unique: true },
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
});

module.exports = mongoose.model('User', UserSchema);
```

**Restaurant.js**

```js
const mongoose = require('mongoose');

const RestaurantSchema = new mongoose.Schema({
  name: { type: String, required: true },
  description: { type: String },
  image: { type: String },
  menu: [
    {
      name: { type: String, required: true },
      description: { type: String },
      price: { type: Number, required: true },
      image: { type: String },
    },
  ],
  reviews: [
    {
      user: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
      comment: { type: String },
      rating: { type: Number },
    },
  ],
});

module.exports = mongoose.model('Restaurant', RestaurantSchema);
```

**Order.js**

```js
const mongoose = require('mongoose');

const OrderSchema = new mongoose.Schema({
  user: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  restaurant: { type: mongoose.Schema.Types.ObjectId, ref: 'Restaurant', required: true },
  items: [
    {
      name: { type: String, required: true },
      quantity: { type: Number, required: true },
      price: { type: Number, required: true },
    },
  ],
  total: { type: Number, required: true },
  status: { type: String, default: 'Pending' },
});

module.exports = mongoose.model('Order', OrderSchema);
```

#### 2.2 Set Up Routes

Create a `routes` directory and add the following files:

**auth.js**

```js
const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../models/User');

const router = express.Router();

router.post('/register', async (req, res) => {
  const { username, email, password } = req.body;

  const user = new User({ username, email, password: bcrypt.hashSync(password, 10) });

  try {
    await user.save();
    res.status(201).json({ message: 'User registered successfully' });
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

router.post('/login', async (req, res) => {
  const { email, password } = req.body;

  const user = await User.findOne({ email });
  if (!user || !bcrypt.compareSync(password, user.password)) {
    return res.status(401).json({ message: 'Invalid credentials' });
  }

  const token = jwt.sign({ userId: user._id }, 'your_jwt_secret');
  res.json({ token });
});

module.exports = router;
```

**restaurants.js**

```js
const express = require('express');
const Restaurant = require('../models/Restaurant');

const router = express.Router();

router.get('/', async (req, res) => {
  const restaurants = await Restaurant.find();
  res.json(restaurants);
});

router.post('/', async (req, res) => {
  const { name, description, image, menu } = req.body;

  const restaurant = new Restaurant({ name, description, image, menu });

  try {
    await restaurant.save();
    res.status(201).json({ message: 'Restaurant added successfully' });
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

router.get('/:id', async (req, res) => {
  const restaurant = await Restaurant.findById(req.params.id);
  res.json(restaurant);
});

module.exports = router;
```

**orders.js**

```js
const express = require('express');
const Order = require('../models/Order');

const router = express.Router();

router.post('/', async (req, res) => {
  const { user, restaurant, items, total } = req.body;

  const order = new Order({ user, restaurant, items, total });

  try {
    await order.save();
    res.status(201).json({ message: 'Order placed successfully' });
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

router.get('/:userId', async (req, res) => {
  const orders = await Order.find({ user: req.params.userId }).populate('restaurant');
  res.json(orders);
});

module.exports = router;
```

**geolocation.js**

```js
const express = require('express');
const axios = require('axios');

const router = express.Router();

router.get('/address/:coords', async (req, res) => {
  const { coords } = req.params;
  const [lat, lng] = coords.split(',');

  try {
    const response = await axios.get(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${lat},${lng}&key=YOUR_GOOGLE_MAPS_API_KEY`);
    res.json(response.data.results[0].formatted_address);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

module.exports = router;
```

#### 2.3 Integrate Routes

Modify `server.js` to include the routes:

```js
const authRoutes = require('./routes/auth');
const restaurantRoutes = require('./routes/restaurants');
const orderRoutes = require('./routes/orders');
const geolocationRoutes = require('./routes/geolocation');

app.use('/api/auth', authRoutes);
app.use('/api/restaurants', restaurantRoutes);
app.use('/api/orders', orderRoutes);
app.use('/api/geolocation', geolocationRoutes);
```

### Step 3: Frontend Implementation

#### 3.1 Set Up Routing

Modify `src/App.js` to include routing:

```jsx
import React from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import Home from './pages/Home';
import RestaurantDetails from './pages/RestaurantDetails';
import OrderSummary from './pages/OrderSummary';
import Login from './pages/Login';
import Register from './pages/Register';
import './styles/App.css';

function App() {
  return (
    <Router>
      <div className="App">
        <Switch>
          <Route path="/" exact component={Home} />
          <Route path="/restaurant/:id" component={RestaurantDetails} />
          <Route path="/order-summary" component={OrderSummary} />
          <Route path="/login" component={Login} />
          <Route path="/register" component={Register} />
        </Switch>
      </div>
    </Router>
  );
}

export default App;
```

#### 3.2 Create Pages and Components

Create the necessary pages and components for the frontend:

**Login.js**

```jsx
import React, { useState } from 'react';
import axios from 'axios';

const Login = ({ history }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  const handleLogin = async (e) => {
    e.preventDefault();

    try {
      const response = await axios.post('http://localhost:5000/api/auth/login', { email, password });
      localStorage.setItem('token', response.data.token);
      history.push('/');
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <div className="login">
      <h2>Login</h2>
      <form onSubmit={handleLogin}>
        <input type="email" placeholder

="Email" value={email} onChange={(e) => setEmail(e.target.value)} required />
        <input type="password" placeholder="Password" value={password} onChange={(e) => setPassword(e.target.value)} required />
        <button type="submit">Login</button>
      </form>
    </div>
  );
};

export default Login;
```

**Register.js**

```jsx
import React, { useState } from 'react';
import axios from 'axios';

const Register = ({ history }) => {
  const [username, setUsername] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  const handleRegister = async (e) => {
    e.preventDefault();

    try {
      await axios.post('http://localhost:5000/api/auth/register', { username, email, password });
      history.push('/login');
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <div className="register">
      <h2>Register</h2>
      <form onSubmit={handleRegister}>
        <input type="text" placeholder="Username" value={username} onChange={(e) => setUsername(e.target.value)} required />
        <input type="email" placeholder="Email" value={email} onChange={(e) => setEmail(e.target.value)} required />
        <input type="password" placeholder="Password" value={password} onChange={(e) => setPassword(e.target.value)} required />
        <button type="submit">Register</button>
      </form>
    </div>
  );
};

export default Register;
```

**Home.js**

```jsx
import React from 'react';
import RestaurantList from '../components/RestaurantList';

const Home = () => (
  <div className="home">
    <h1>Welcome to Food Delivery App</h1>
    <RestaurantList />
  </div>
);

export default Home;
```

**RestaurantDetails.js**

```jsx
import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import axios from 'axios';
import Restaurant from '../components/Restaurant';
import Menu from '../components/Menu';
import Reviews from '../components/Reviews';
import '../styles/RestaurantDetails.css';

const RestaurantDetails = () => {
  const { id } = useParams();
  const [restaurant, setRestaurant] = useState(null);

  useEffect(() => {
    axios.get(`http://localhost:5000/api/restaurants/${id}`).then((response) => {
      setRestaurant(response.data);
    });
  }, [id]);

  if (!restaurant) {
    return <div>Loading...</div>;
  }

  return (
    <div className="restaurant-details">
      <Restaurant restaurant={restaurant} />
      <Menu menu={restaurant.menu} />
      <Reviews reviews={restaurant.reviews} />
    </div>
  );
};

export default RestaurantDetails;
```

**OrderSummary.js**

```jsx
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import Order from '../components/Order';
import OrderTracking from '../components/OrderTracking';
import '../styles/OrderSummary.css';

const OrderSummary = () => {
  const [order, setOrder] = useState(null);

  useEffect(() => {
    const userId = localStorage.getItem('userId');
    axios.get(`http://localhost:5000/api/orders/${userId}`).then((response) => {
      setOrder(response.data[0]); // Assuming a single order for simplicity
    });
  }, []);

  if (!order) {
    return <div>Loading...</div>;
  }

  return (
    <div className="order-summary">
      <Order order={order} />
      <OrderTracking status={order.status} />
    </div>
  );
};

export default OrderSummary;
```

### Step 4: Testing and Deployment

1. **Test the application locally** to ensure all functionalities work as expected.
2. **Deploy the backend** using services like Heroku, AWS, or Vercel.
3. **Deploy the frontend** using services like Netlify, Vercel, or GitHub Pages.
4. **Update API URLs** in the frontend to point to the deployed backend.

### Conclusion

This guide provides a comprehensive setup for building a full-stack food delivery platform with user authentication, restaurant management, order processing, geolocation services, and database integration. You can further enhance the application by adding more features, improving the UI/UX, and integrating real-time order updates.
