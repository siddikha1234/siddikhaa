Building a URL shortener involves creating a service where users can input long URLs, and receive shorter, unique URLs in return. Hereâ€™s a step-by-step guide on how to create a URL shortener using Node.js, Express, and MongoDB.

### Step 1: Set Up Your Project

1. **Initialize a Node.js project**
   ```sh
   mkdir url-shortener
   cd url-shortener
   npm init -y
   ```

2. **Install necessary packages**
   ```sh
   npm install express mongoose shortid
   ```

### Step 2: Create the Basic Server

Create a `server.js` file and set up a basic Express server:

```js
const express = require('express');
const mongoose = require('mongoose');
const ShortId = require('shortid');

const app = express();
const port = process.env.PORT || 3000;

// Connect to MongoDB
mongoose.connect('mongodb://localhost/urlshortener', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

const urlSchema = new mongoose.Schema({
  originalUrl: String,
  shortUrl: String,
  shortId: { type: String, unique: true },
});

const Url = mongoose.model('Url', urlSchema);

app.use(express.json());

// Endpoint to create short URL
app.post('/shorten', async (req, res) => {
  const { originalUrl } = req.body;
  const shortId = ShortId.generate();
  const shortUrl = `${req.headers.host}/${shortId}`;

  const url = new Url({ originalUrl, shortUrl, shortId });
  await url.save();

  res.json({ originalUrl, shortUrl });
});

// Endpoint to redirect to the original URL
app.get('/:shortId', async (req, res) => {
  const { shortId } = req.params;
  const url = await Url.findOne({ shortId });

  if (url) {
    res.redirect(url.originalUrl);
  } else {
    res.status(404).json('URL not found');
  }
});

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
```

### Step 3: Test Your API

1. **Start the server**
   ```sh
   node server.js
   ```

2. **Create a short URL**
   Use a tool like Postman to send a POST request to `http://localhost:3000/shorten` with a JSON body:
   ```json
   {
     "originalUrl": "https://www.example.com"
   }
   ```

3. **Redirect using the short URL**
   Navigate to the short URL provided in the response (e.g., `http://localhost:3000/abc123`).

### Step 4: Enhance the Project

1. **Validation and error handling**
   - Validate URLs before saving them to the database.
   - Handle cases where the shortId is not found.

2. **Expiration and analytics**
   - Add an expiration date to the URLs.
   - Track the number of clicks and provide analytics.

3. **User interface**
   - Create a simple frontend to interact with your API.

### Step 5: Deploy the Application

1. **Deploy the application to a platform like Heroku or Vercel.**
2. **Use a managed MongoDB service like MongoDB Atlas.**

Here is an example of how you can handle URL validation:

```js
const validUrl = require('valid-url');

app.post('/shorten', async (req, res) => {
  const { originalUrl } = req.body;

  if (!validUrl.isUri(originalUrl)) {
    return res.status(400).json('Invalid URL');
  }

  const shortId = ShortId.generate();
  const shortUrl = `${req.headers.host}/${shortId}`;

  const url = new Url({ originalUrl, shortUrl, shortId });
  await url.save();

  res.json({ originalUrl, shortUrl });
});
```

This project can be further extended and improved based on specific requirements and use cases.
